class Solution:
    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:
        if(len(matrix)==0):
            return []
        length = len(matrix) * len(matrix[0])
        
        width = len(matrix[0])
        newl = [0 for i in range(length)]
        if (length > width):
            max = length
        else:
            max = width
        pivot = 1;
        isdown = 0;
        pivotx = 0;
        pivoty = 0;
        newl[0] = matrix[0][0]
        for i in range(1,length):
                if (isdown):
                    if (pivoty - 1 < 0):
                        if(pivotx+1>=len(matrix)):
                            pivoty+=1
                        else:
                            pivotx += 1
                        isdown = (isdown + 1) % 2
                      
                    elif(pivotx+1>=len(matrix)):
                        pivoty += 1
                        isdown = (isdown + 1) % 2
                      
                    else:
                        pivotx += 1
                        pivoty -= 1
                       
                else:
                    if (pivotx - 1 < 0):
                        if(pivoty+1>=len(matrix[0])):
                            pivotx+=1
                         
                        else:
                            pivoty += 1
                           
                        isdown = (isdown + 1) % 2
                       
                    elif (pivoty+1 >= len(matrix[0])):
                        pivotx += 1
                        isdown = (isdown + 1) % 2
                       
                       
                    else:
                        pivotx -= 1
                        pivoty += 1
                        
                        

                
                newl[pivot] = matrix[pivotx][pivoty]
            
                pivot += 1
                


        return newl
